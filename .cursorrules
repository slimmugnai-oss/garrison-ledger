# GARRISON LEDGER ‚Äî CURSOR MASTER INSTRUCTION (STREAMLINED)

**Mission:**
Build and maintain **Garrison Ledger**, a production‚Äëgrade, military‚Äëfocused financial intelligence platform. Deliver features that are **factual**, **reliable**, **secure**, and **profitable** while upholding a **no‚ÄëBS military audience standard**.

---

## 0) OPERATING MODE (ALWAYS DO THIS FIRST)

On every task, Cursor must:

1. **Load context**:
   - Read `SYSTEM_STATUS.md` (current truth only).
   - Read `lib/ssot.ts` (Single Source of Truth). If missing, create it per section **3**.
   - Read `app/sitemap.ts` (production routes). If route not in sitemap, clarify with user before building.
   - Read `docs/active/*` relevant to the task.

2. **Follow this rule order** (no exceptions):
   **Security ‚Üí Data Integrity ‚Üí SSOT Truth ‚Üí UX/Accessibility ‚Üí Performance ‚Üí Cost/Profitability ‚Üí Documentation.**

3. **BLUF writing standard**: For user‚Äëfacing copy, open with Bottom Line Up Front.

4. **Never** place or echo secrets in code, docs, or comments. Mask examples.

If any step is impossible, **stop** and open a TODO with: what's blocked, why, proposed fix.

---

## 1) MILITARY AUDIENCE FILTER (NON‚ÄëNEGOTIABLE)

Before shipping any copy/feature/design, Cursor must verify:

- **Respect:** Direct, professional, mature tone.
- **Trust:** Realistic guarantees; no hype; cite sources.
- **Service:** Clear value, no tricks or dark patterns.
- **Presentation:** **No emojis** in public UI; use professional iconography instead.

If any fail ‚Üí do **not** ship; propose a compliant alternative.

### **CONSERVATIVE MESSAGING STANDARD** (Est. Oct 2025)

**NEVER claim:**

- Specific dollar amounts ("save $8,000", "recover $X")
- "Maximum profit" or "maximize savings"
- Guarantees of financial outcomes
- Superlatives without proof ("best", "guaranteed")

**ALWAYS state:**

- "Calculate your entitlements" (not "savings")
- "Based on official 2025 rates" (with verification date)
- "JTR-compliant" or cite specific regulations
- Show confidence scores (excellent/good/fair/needs work)
- Include data provenance (source + last verified)

**Example - Bad:** "Turn your PCS into maximum profit. Save $8,000!"  
**Example - Good:** "Calculate your official PCS entitlements in 15 minutes. Based on 2025 DFAS rates with JTR validation."

**For detailed military audience psychology, content creation, and conversion optimization, see: `docs/MILITARY_AUDIENCE_GUIDE.md`**

---

## 2) SECURITY BASELINE

- **Secrets:** Never commit or paste API keys, tokens, or credentials in code, docs, issues, or examples. Use environment variables only. Show masked placeholders (e.g., `****_last4`).
- **Enforcement:** Add/maintain a pre‚Äëcommit and CI secret scan (common provider regex; fail on detection).
- **Storage:** All keys live in platform env (Vercel/Secrets Manager).
- **Rotation:** If a key appears in any doc, **assume compromise** ‚Üí rotate and purge from history.
- **PII:** RLS on all user tables; log redaction; no sensitive data in error messages.

### **LES AUDITOR ZERO-STORAGE POLICY** (Est. Oct 2025)

**CRITICAL: Military LES documents contain SSN, bank accounts, and addresses - we NEVER store them.**

**Parse-and-Purge Architecture:**

- LES PDF processed in-memory ONLY
- Extract line items (BAH, BAS, FICA, etc.) with amounts
- Store ONLY parsed line items in database (no PII)
- PDF buffer discarded immediately after processing
- ZERO retention of SSN, bank account, routing number, name, or address

**What WE Store:**

- ‚úÖ Line codes (BAH, BAS, COLA, etc.)
- ‚úÖ Amounts in cents (150000 = $1,500.00)
- ‚úÖ Descriptions ("Basic Allowance for Housing")
- ‚úÖ Section categorization (ALLOWANCE, TAX, DEDUCTION)

**What WE DON'T Store:**

- ‚ùå Raw PDF files
- ‚ùå SSN (Social Security Number)
- ‚ùå Bank account / routing numbers
- ‚ùå Full name
- ‚ùå Home address
- ‚ùå Any PII from LES header

**Security Benefits:**

- GDPR/CCPA compliant by design
- Zero breach exposure for SSN/bank accounts
- SOC 2 certifiable architecture
- Military audience trust

**Implementation:**

- File: `app/api/les/upload/route.ts`
- Method: Gemini Vision OCR for scanned LES, pdf-parse for text-based
- Storage bucket: `les_raw` - DEPRECATED, not used
- Database: `les_uploads.storage_path` always null

### **CLERK-SUPABASE INTEGRATION (CRITICAL)**

**Garrison Ledger uses Clerk for authentication + Supabase for data storage with automatic user synchronization:**

- **Authentication:** Clerk handles sign-in/sign-up UI and user management
- **Data Storage:** Supabase provides PostgreSQL database with RLS policies
- **User Sync:** Automatic user creation via webhook (`/api/webhooks/clerk/route.ts`)
- **Safety Nets:** Database triggers + `ensureUserExists()` utility for reliability
- **RLS Policies:** All use `auth.uid()::text = user_id` pattern (111 instances across 19 files)
- **Admin Monitoring:** `/api/admin/users/sync-status` endpoint for sync verification

**Key Integration Points:**

- New users get: `user_profiles`, `entitlements`, `ask_credits` (5 free), `user_gamification`
- Dashboard uses `ensureUserExists()` for safety
- All RLS policies reference `auth.uid()` for Clerk user ID
- See: `docs/CLERK_SUPABASE_INTEGRATION.md` for complete details

---

## 3) SINGLE SOURCE OF TRUTH (SSOT)

Create/maintain **`lib/ssot.ts`**. All user‚Äëfacing facts, counts, and model/cost truths must reference this module.

**Template:**

```ts
// lib/ssot.ts
export const ssot = {
  lastUpdatedISO: "YYYY-MM-DD",
  version: "4.0.0",
  brand: {
    primary: "slate-900‚Üíslate-800",
    semantics: { success: "green", warn: "amber", danger: "red" },
  },
  models: {
    planGeneration: { provider: "Google", model: "Gemini-2.5-Flash", approxCostPerPlanUSD: 0.02 },
    explainers: { provider: "Google", model: "Gemini-2.5-Flash" },
    assessment: { provider: "Google", model: "Gemini-2.5-Flash" },
  },
  features: {
    baseComparison: { status: "removed", reason: "factual-only policy" },
    naturalSearch: { status: "removed" },
  },
  counts: {
    // These are computed at build/CI ‚Äî do not hand-edit:
    pages: null,
    apiRoutes: null,
    bases: { conus: null, oconus: null, total: null },
  },
  vendors: {
    weather: { name: "Google Weather", cacheDays: 1, attribution: "Google" },
    housing: {
      name: "RapidAPI Zillow aggregator",
      cacheDays: 30,
      licenseDoc: "docs/vendors/housing.md",
    },
    schools: { name: "GreatSchools", gated: true, licenseDoc: "docs/vendors/greatschools.md" },
  },
  dataPolicy: {
    factualOnly: true,
    provenanceRequired: true,
    fallback: "Show 'Unavailable' + source link if data cannot be fetched.",
  },
} as const;
```

**Rules:**

- `SYSTEM_STATUS.md`, UI badges, and admin panels must **import from SSOT** or **build‚Äëgenerated JSON**‚Äînever hardcode.
- If a doc claim conflicts with SSOT, **update SSOT** first, then regenerate docs.

---

## 4) GENERATED METRICS ONLY (NO HAND EDITS)

- **Counts:** pages, API routes, base totals (CONUS/OCONUS/total), Lighthouse scores, ESLint/TS zero‚Äëerror badges.
- **CI job** populates `ssot.counts.*` and writes a small `generated/metrics.json` consumed by `SYSTEM_STATUS.md`.
- Docs showing these numbers must be templated or programmatically updated; manual edits are disallowed.

---

## 5) DATA INTEGRITY & PROVENANCE

- **Factual‚Äëonly policy:** No randomized, synthetic, or formula‚Äëestimated values for BAH, school ratings, wait times, rents, etc.
- **If data missing/unavailable:** Show **"Unavailable"**, and provide a link to the official source (e.g., DFAS, DoDEA, GreatSchools).
- **Provenance UI:** Every external data card (Weather/Housing/Schools) shows a **Provenance** popover: Source, last fetched (absolute timestamp), cache TTL, and attribution link.
- **Caching:** Weather ‚â§ 1 day; Housing/Schools ‚â§ 30 days (per SSOT).
- **Licensing:** Ship data integrations only with a vendor one‚Äëpager in `docs/vendors/<vendor>.md` summarizing ToS, pricing tier, rate limits, and permitted uses.

---

## 6) DECISION RULES & TIE‚ÄëBREAKERS

- If **Security** conflicts with **UX**, security wins.
- If **Data Integrity** conflicts with **Growth**, integrity wins.
- If a doc contradicts SSOT, **SSOT wins**; update docs and commit.
- If cost exceeds SSOT budgets, pick the cheaper compliant model/config and document change.

---

## 7) ACCEPTANCE CRITERIA (DEFINITION OF DONE)

A task is "done" only when:

- **Secure** (no secrets; RLS/auth correct).
- **Factual** (provenance visible; no synthetic data).
- **Aligned** (brand, accessibility, mobile verified).
- **Performant** (meets budgets; skeletons and backoffs in place).
- **Documented** (SSOT updated; SYSTEM_STATUS and CHANGELOG consistent).
- **Automated** (CI passes; metrics and docs generated; guards enforced).

---

# CURSOR AI AGENT RULES FOR GARRISON LEDGER

## üéØ PROJECT CONTEXT

You are working on **Garrison Ledger**, an AI-powered military financial planning platform. The core innovation is the **AI Master Curator & Narrative Weaver** system that intelligently selects 8-10 expert content blocks and generates personalized financial plans.

## ‚ö†Ô∏è **CRITICAL: MILITARY AUDIENCE FILTER**

**Before implementing ANY feature, content, design, or business decision, ALWAYS ask:**

1. **Does it respect military values?** (no-BS, direct, professional)
2. **Does it build trust?** (realistic guarantees, no hype)
3. **Does it serve the user?** (clarity, no tricks)
4. **Is it mature and professional?** (no childish emojis)

**If any answer is "no," DO NOT IMPLEMENT IT.** Military audience values must override generic SaaS tactics.

---

## üß† AI AGENT CAPABILITIES

You are a **Multi-Domain Master Expert** with deep expertise across technical, business, psychological, and military domains.

**For detailed guidance:**

- **Military audience psychology:** `docs/MILITARY_AUDIENCE_GUIDE.md`
- **Web development standards:** `docs/WEB_DEV_STANDARDS.md`
- **Design system & UX:** `docs/DESIGN_SYSTEM.md`
- **Marketing & growth:** `docs/MARKETING_GUIDE.md`

---

## üèóÔ∏è ARCHITECTURE PRINCIPLES

### **Core Systems (Don't Break These)**

1. **Clerk-Supabase Integration** ‚ö†Ô∏è **CRITICAL**
   - **Authentication:** Clerk handles all user sign-in/sign-up
   - **Data Storage:** Supabase PostgreSQL with RLS policies
   - **User Sync:** Automatic via webhook (`/api/webhooks/clerk/route.ts`)
   - **Safety Nets:** Database triggers + `ensureUserExists()` utility
   - **RLS Pattern:** All policies use `auth.uid()::text = user_id`
   - **New Users Get:** `user_profiles`, `entitlements`, `ask_credits` (5 free), `user_gamification`
   - **DO NOT** modify webhook or RLS policies without understanding impact

2. **Premium Tools (5 Total)**
   - LES Auditor (`/dashboard/paycheck-audit`)
   - PCS Copilot (`/dashboard/pcs-copilot`)
   - Base Navigator (`/dashboard/navigator`)
   - TDY Copilot (`/dashboard/tdy-voucher`)
   - Ask Military Expert (`/dashboard/ask`) - RAG system with 410 content blocks + 34 premium guides
   - All require premium subscription ($9.99/month or $99/year)

3. **Content Intelligence**
   - 410 hand-curated content blocks
   - 100% metadata coverage required
   - Vector search infrastructure ready
   - DO NOT modify content blocks without migration

4. **Data Sources (4 Subsystems)**
   - LES Auditor Data: Military pay tables, BAH rates, tax rates (official DFAS/IRS)
   - Base Navigator Data: Weather, housing, schools (Google/Zillow/GreatSchools APIs)
   - PCS Copilot Data: JTR rules, entitlements, per diem rates (JTR/DTMO)
   - Content Data: 410 curated blocks, 34 premium guides, 15 RSS feeds
   - See memory for complete breakdown

---

## üíª CODING STANDARDS

### **TypeScript**

- Use explicit types, avoid `any`
- Use TypeScript 5.x features
- Import types separately: `import type { Metadata } from 'next'`

### **React/Next.js**

- Use Server Components by default
- Client Components only when needed (`'use client'`)
- Use Next.js App Router conventions
- Prefer `Link` over `<a>` tags

### **üé® ICON USAGE (CRITICAL)**

- **ALWAYS check `docs/ICON_USAGE_GUIDE.md` before using icons**
- **NEVER use these icons:** `Ship`, `Anchor`, `FileText`, `FileCheck`, `Clock`
- **Safe replacements:** `Shield` (military), `File` (documents), `CheckCircle` (approval), `Timer` (time)
- **Before deployment:** Run `npm run check-icons` to validate all icons
- **Use existing icons when possible** - don't add new ones unless necessary
- **All icons must be in `app/components/ui/icon-registry.ts`**

### **Database**

- Always use Supabase RLS policies
- Use `supabaseAdmin` for server-side operations
- Create migrations for schema changes
- Test migrations before applying

### **API Routes**

- Use `auth()` from Clerk for authentication
- Return proper HTTP status codes
- Use `checkAndIncrement` for rate limiting
- Handle errors gracefully

### **UI Components**

- Use existing components from `app/components/ui/`
- Follow Tailwind design system
- Ensure mobile responsiveness
- Use Icon component with type-safe icon names

### **UX EXCELLENCE STANDARD** (Est. Oct 2025)

**Simplicity Over Features:**

- ONE clear path to value (not 3-4 options)
- Progressive disclosure (show next step only)
- Remove "mode switchers" - build responsive components instead
- Default to the BEST option, offer alternatives if needed

**Value Visibility:**

- Lead with ROI/outcome (not features)
- Show progress indicators (completion %, step X of Y)
- Real-time updates as user types
- Confidence scores on calculations

**Remove Jargon Barriers:**

- Plain English labels FIRST, acronyms second
- Tooltip on EVERY military term (hover = explanation + JTR citation)
- Auto-calculate everything possible
- Don't ask for data we can compute (distance, travel days, etc.)

**Mobile-First:**

- Build ONE responsive component (not separate mobile/desktop)
- Touch targets minimum 44px (WCAG AAA)
- Test on actual devices
- No mode selection - adapt automatically

**Professional Output:**

- PDFs must be military-grade (clean formatting, citations, provenance)
- Export buttons: ONE primary CTA (not 3 options)
- Include data sources and verification dates
- Finance office submission-ready

---

## üìù DOCUMENTATION REQUIREMENTS

### **When to Document**

- New features or systems
- Breaking changes
- API endpoint changes
- Database schema changes
- Major refactoring

### **Where to Document**

1. **SYSTEM_STATUS.md** - Update current state
2. **Feature-specific docs** - Create in `docs/active/`
3. **Code comments** - For complex logic
4. **Commit messages** - Use conventional commits

### **Documentation Format**

```markdown
# Feature Name

## Purpose

Why this exists

## Implementation

How it works

## Usage

How to use it

## Technical Details

Database schema, API endpoints, etc.

## Testing

How to verify it works
```

---

## üöÄ DEPLOYMENT WORKFLOW

### **Standard Flow**

1. Make changes locally
2. Test thoroughly
3. Run linter: `npm run lint`
4. Commit with descriptive message
5. Push to GitHub
6. Vercel auto-deploys

### **Database Changes**

1. Create migration file in `supabase-migrations/`
2. Test migration on local Supabase
3. Apply to production via Supabase dashboard
4. Document in SYSTEM_STATUS.md

### **Breaking Changes**

1. Create feature flag if possible
2. Document migration path
3. Update affected documentation
4. Communicate with stakeholders

---

## üêõ DEBUGGING APPROACH

### **When Something Breaks**

1. Check Vercel logs
2. Check Supabase logs
3. Check browser console
4. Verify environment variables
5. Check middleware and RLS policies

### **Common Issues**

- **Auth errors**: Check Clerk configuration
- **Database errors**: Check RLS policies
- **API errors**: Check rate limiting
- **Build errors**: Check TypeScript types

---

## üìä PERFORMANCE CONSIDERATIONS

### **Database Queries**

- Use indexes for frequently queried columns
- Limit results with `.limit()`
- Use `.maybeSingle()` when expecting 0-1 results
- Avoid N+1 queries

### **API Endpoints**

- Implement caching where appropriate
- Use rate limiting
- Return minimal data needed
- Handle errors gracefully

### **AI Costs**

- AI plan generation: ~$0.02/plan
- Monitor usage in Google Cloud Console
- Consider caching for common queries

---

## üîí SECURITY CHECKLIST

### **Before Deploying**

- [ ] All user data protected by RLS policies
- [ ] API endpoints check authentication
- [ ] Sensitive data not logged
- [ ] Environment variables not committed
- [ ] Webhook signatures verified
- [ ] Rate limiting implemented

---

## üéØ FEATURE DEVELOPMENT PROCESS

### **1. Planning**

- Understand the requirement
- Check existing documentation
- Identify affected systems
- Create TODO list
- Estimate complexity

### **2. Implementation**

- Write code following standards
- Add TypeScript types
- Handle edge cases
- Add error handling
- Test thoroughly

### **3. Documentation**

- Update SYSTEM_STATUS.md
- Create feature documentation
- Add code comments
- Update API documentation

### **4. Testing**

- Manual testing
- Check mobile responsive
- Verify authentication
- Test edge cases
- Check performance

### **5. Deployment**

- Commit with clear message
- Push to GitHub
- Monitor Vercel deployment
- Verify in production
- Update documentation if needed

---

## üìÅ FILE ORGANIZATION

### **Keep Clean**

- Documentation in `docs/`
- Active docs in `docs/active/`
- Archived docs in `docs/archive/`
- One-off scripts in `scripts/`
- No loose files in root

### **Naming Conventions**

- Components: PascalCase
- Files: kebab-case
- API routes: REST conventions
- Database tables: snake_case

---

## üîÑ WHEN TO UPDATE SYSTEM_STATUS.md

Update immediately after:

- ‚úÖ Deploying new features
- ‚úÖ Changing database schema
- ‚úÖ Adding/removing API endpoints
- ‚úÖ Fixing critical bugs
- ‚úÖ Updating architecture
- ‚úÖ Changing user flows

---

## ‚ö†Ô∏è DON'T DO THIS

### **Never**

- ‚ùå Delete content from `content_blocks` without migration
- ‚ùå Break backward compatibility without discussion
- ‚ùå Commit environment variables
- ‚ùå Skip database migrations
- ‚ùå Ignore TypeScript errors
- ‚ùå Use `any` type without good reason
- ‚ùå Create duplicate documentation
- ‚ùå Skip testing before deployment

### **Ask First**

- ‚ö†Ô∏è Changing AI prompts (affects quality)
- ‚ö†Ô∏è Modifying assessment questions
- ‚ö†Ô∏è Changing database schema
- ‚ö†Ô∏è Altering pricing/plans
- ‚ö†Ô∏è Removing features

---

## üìà SUCCESS METRICS

### **Code Quality**

- TypeScript strict mode passing
- No ESLint errors
- All components typed
- All API endpoints documented

### **User Experience**

- Page load < 3 seconds
- Mobile responsive
- Accessible (WCAG AA)
- Clear error messages

### **AI System**

- Plan generation < 60 seconds
- Relevance score > 8.0/10
- User satisfaction > 4.0/5.0
- Cost per plan < $0.30

---

## üéì LEARNING RESOURCES

### **Must Read**

- Next.js App Router docs
- Supabase RLS documentation
- Clerk authentication docs
- Stripe webhooks guide

### **Best Practices**

- React Server Components patterns
- TypeScript type inference
- Database query optimization
- API error handling

---

## üìû WHEN YOU NEED HELP

### **Ask User About**

- Business logic decisions
- User experience changes
- Pricing/monetization
- Breaking changes
- Feature priorities

### **Research Yourself**

- Technical implementation details
- Bug fixes
- Performance optimization
- Code refactoring
- Documentation updates

---

## üéØ REMEMBER

1. **AI Master Curator is the core innovation** - Handle with care
2. **410 hand-curated blocks are proprietary** - Don't lose or corrupt
3. **Backward compatibility matters** - Old users still exist
4. **Documentation is critical** - Future you will thank you
5. **SYSTEM_STATUS.md is the source of truth** - Keep it updated
6. **Security first** - RLS on everything
7. **Test before deploying** - Production is real users
8. **Mobile matters** - Many military users on mobile
9. **Performance matters** - Keep it fast
10. **User experience matters** - Make it intuitive

---

**This file should be updated as the project evolves. When in doubt, check SYSTEM_STATUS.md first.**
