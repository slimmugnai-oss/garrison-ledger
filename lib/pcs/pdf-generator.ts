/**
 * PCS CLAIM PDF GENERATOR
 *
 * Generates professional PDF calculation worksheets with:
 * - PCS entitlements summary and calculations
 * - All uploaded receipts and documents
 * - JTR compliance validation results
 * - Reference guide for DD Form 1351-2 completion
 *
 * NOTE: This is NOT the official voucher form. Service members must
 * submit DD Form 1351-2 through DTS for actual reimbursement.
 */

import html2canvas from "html2canvas";
import jsPDF from "jspdf";

import { logger } from "@/lib/logger";

export interface PCSClaimData {
  id: string;
  claim_name: string;
  member_name: string;
  rank: string;
  branch: string;
  origin_base: string;
  destination_base: string;
  pcs_orders_date: string;
  departure_date: string;
  dependents_authorized: boolean;
  dependents_count: number;
  estimated_weight: number;
  travel_method: "dity" | "full" | "partial";
  distance: number;
  created_at: string;
  updated_at: string;
}

export interface PCSDocument {
  id: string;
  name: string;
  type: string;
  size: number;
  url: string;
  ocr_text?: string;
  extracted_data?: {
    amount?: number;
    date?: string;
    vendor?: string;
    category?: string;
  };
  uploaded_at: string;
}

export interface PCSCalculations {
  dla: {
    amount: number;
    confidence: number;
    source: string;
    lastVerified: string;
  };
  tle: {
    amount: number;
    confidence: number;
    source: string;
    lastVerified: string;
  };
  malt: {
    amount: number;
    confidence: number;
    source: string;
    lastVerified: string;
  };
  per_diem: {
    amount: number;
    confidence: number;
    source: string;
    lastVerified: string;
  };
  ppm: {
    amount: number;
    confidence: number;
    source: string;
    lastVerified: string;
  };
  total_entitlements: number;
  confidence: {
    overall: number;
    dataSources: Record<string, string>;
  };
}

export interface ValidationResult {
  rule_code: string;
  rule_title: string;
  category: string;
  severity: "error" | "warning" | "info";
  message: string;
  jtr_citation?: string;
  suggested_fix?: string;
}

/**
 * Generate a complete PCS claim PDF package
 */
export async function generatePCSClaimPDF(
  claimData: PCSClaimData,
  calculations: PCSCalculations,
  documents: PCSDocument[],
  validationResults: ValidationResult[]
): Promise<Buffer> {
  try {
    const pdf = new jsPDF("p", "mm", "a4");
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    let yPosition = 20;

    // Add header (returns starting Y position after header)
    const headerEndY = await addHeader(pdf, claimData);
    yPosition = headerEndY + 15; // Add spacing after header

    // Add claim summary
    yPosition = await addClaimSummary(pdf, claimData, calculations, yPosition);

    // Add calculations breakdown
    yPosition = await addCalculationsBreakdown(pdf, calculations, yPosition);

    // Add validation results
    yPosition = await addValidationResults(pdf, validationResults, yPosition);

    // Add documents list
    yPosition = await addDocumentsList(pdf, documents, yPosition);

    // Add next steps section (DD-1351-2 process)
    yPosition = await addNextStepsSection(pdf, yPosition);

    // Add footer
    addFooter(pdf);

    // Convert to buffer
    const pdfBuffer = Buffer.from(pdf.output("arraybuffer"));

    logger.info("PCS claim PDF generated successfully", {
      claimId: claimData.id,
      size: pdfBuffer.length,
    });

    return pdfBuffer;
  } catch (error) {
    logger.error("Failed to generate PCS claim PDF:", error);
    throw new Error("PDF generation failed");
  }
}

/**
 * Add professional header with branding and claim information
 * Returns the Y position after the header for continuation
 */
async function addHeader(pdf: jsPDF, claimData: PCSClaimData): Promise<number> {
  // Header background (dark professional header)
  pdf.setFillColor(30, 41, 59); // slate-800
  pdf.rect(0, 0, 210, 35, "F");

  // Title
  pdf.setFontSize(24);
  pdf.setFont("helvetica", "bold");
  pdf.setTextColor(255, 255, 255);
  pdf.text("PCS CALCULATION WORKSHEET", 105, 15, { align: "center" });

  // Subtitle
  pdf.setFontSize(10);
  pdf.setFont("helvetica", "normal");
  pdf.text("Generated by Garrison Ledger PCS Copilot", 105, 22, { align: "center" });
  pdf.text(`Reference Guide for DD Form 1351-2 Completion • ${new Date().toLocaleDateString()}`, 105, 28, {
    align: "center",
  });

  // IMPORTANT NOTICE - Yellow box (moved up to avoid overlap)
  pdf.setFillColor(254, 240, 138); // yellow-200
  pdf.rect(10, 36, 190, 12, "F");
  pdf.setFontSize(8);
  pdf.setTextColor(133, 77, 14); // yellow-900
  pdf.setFont("helvetica", "bold");
  pdf.text("⚠ IMPORTANT:", 15, 41);
  pdf.setFont("helvetica", "normal");
  pdf.text(
    "This is a CALCULATION WORKSHEET, not an official voucher. Submit DD Form 1351-2 through DTS for reimbursement.",
    35,
    41
  );
  pdf.text("Use this guide to ensure you claim all entitled amounts correctly.", 15, 46);

  // Reset text color for body
  pdf.setTextColor(0, 0, 0);

  // Member Information Section (moved down to avoid overlap)
  const memberInfoStartY = 56;
  pdf.setFontSize(13);
  pdf.setFont("helvetica", "bold");
  pdf.text("MEMBER INFORMATION", 20, memberInfoStartY);

  pdf.setFontSize(10);
  pdf.setFont("helvetica", "normal");
  let currentY = memberInfoStartY + 8;
  
  // Handle undefined values gracefully
  pdf.text(`Name: ${claimData.member_name || "Not provided"}`, 20, currentY);
  currentY += 6;
  pdf.text(`Rank: ${claimData.rank || "Not provided"}`, 20, currentY);
  currentY += 6;
  pdf.text(`Branch: ${claimData.branch || "Not provided"}`, 20, currentY);
  currentY += 6;
  pdf.text(
    `Dependents: ${claimData.dependents_authorized ? "Yes" : "No"} (${claimData.dependents_count || 0})`,
    20,
    currentY
  );

  // PCS Details Section (right side)
  const pcsDetailsStartY = memberInfoStartY;
  pdf.setFontSize(13);
  pdf.setFont("helvetica", "bold");
  pdf.text("PCS DETAILS", 110, pcsDetailsStartY);

  pdf.setFontSize(10);
  pdf.setFont("helvetica", "normal");
  currentY = pcsDetailsStartY + 8;
  
  pdf.text(`Origin: ${claimData.origin_base || "Not provided"}`, 110, currentY);
  currentY += 6;
  pdf.text(`Destination: ${claimData.destination_base || "Not provided"}`, 110, currentY);
  currentY += 6;
  pdf.text(`Orders Date: ${claimData.pcs_orders_date || "Not provided"}`, 110, currentY);
  currentY += 6;
  pdf.text(`Departure: ${claimData.departure_date || "Not provided"}`, 110, currentY);
  currentY += 6;
  pdf.text(`Travel Method: ${(claimData.travel_method || "Not provided").toUpperCase()}`, 110, currentY);
  currentY += 6;
  pdf.text(`Distance: ${claimData.distance || 0} miles`, 110, currentY);

  // Separator line (moved down)
  const separatorY = memberInfoStartY + 32;
  pdf.setLineWidth(0.5);
  pdf.setDrawColor(226, 232, 240); // slate-200
  pdf.line(20, separatorY, 190, separatorY);
  
  // Return Y position after header (for next section)
  return separatorY + 5;
}

/**
 * Add claim summary section
 */
async function addClaimSummary(
  pdf: jsPDF,
  claimData: PCSClaimData,
  calculations: PCSCalculations,
  yPosition: number
): Promise<number> {
  pdf.setFontSize(16);
  pdf.setFont("helvetica", "bold");
  pdf.text("CLAIM SUMMARY", 20, yPosition);

  yPosition += 15;

  pdf.setFontSize(12);
  pdf.setFont("helvetica", "normal");

  // Total entitlements
  pdf.setFont("helvetica", "bold");
  pdf.text(
    `Total Estimated Entitlements: $${calculations.total_entitlements.toFixed(2)}`,
    20,
    yPosition
  );
  yPosition += 10;

  pdf.setFont("helvetica", "normal");
  pdf.text(
    `DLA: $${calculations.dla.amount.toFixed(2)} (${(calculations.dla.confidence * 100).toFixed(0)}% confidence)`,
    20,
    yPosition
  );
  yPosition += 8;

  pdf.text(
    `TLE: $${calculations.tle.amount.toFixed(2)} (${(calculations.tle.confidence * 100).toFixed(0)}% confidence)`,
    20,
    yPosition
  );
  yPosition += 8;

  pdf.text(
    `MALT: $${calculations.malt.amount.toFixed(2)} (${(calculations.malt.confidence * 100).toFixed(0)}% confidence)`,
    20,
    yPosition
  );
  yPosition += 8;

  pdf.text(
    `Per Diem: $${calculations.per_diem.amount.toFixed(2)} (${(calculations.per_diem.confidence * 100).toFixed(0)}% confidence)`,
    20,
    yPosition
  );
  yPosition += 8;

  pdf.text(
    `PPM: $${calculations.ppm.amount.toFixed(2)} (${(calculations.ppm.confidence * 100).toFixed(0)}% confidence)`,
    20,
    yPosition
  );
  yPosition += 15;

  return yPosition;
}

/**
 * Add detailed calculations breakdown
 */
async function addCalculationsBreakdown(
  pdf: jsPDF,
  calculations: PCSCalculations,
  yPosition: number
): Promise<number> {
  pdf.setFontSize(16);
  pdf.setFont("helvetica", "bold");
  pdf.text("CALCULATIONS BREAKDOWN", 20, yPosition);

  yPosition += 15;

  pdf.setFontSize(10);
  pdf.setFont("helvetica", "normal");

  // DLA details
  pdf.text("DLA (Dislocation Allowance):", 20, yPosition);
  yPosition += 6;
  pdf.text(`  Amount: $${calculations.dla.amount.toFixed(2)}`, 25, yPosition);
  yPosition += 5;
  pdf.text(`  Source: ${calculations.dla.source}`, 25, yPosition);
  yPosition += 5;
  pdf.text(`  Last Verified: ${calculations.dla.lastVerified}`, 25, yPosition);
  yPosition += 10;

  // TLE details
  pdf.text("TLE (Temporary Lodging Expense):", 20, yPosition);
  yPosition += 6;
  pdf.text(`  Amount: $${calculations.tle.amount.toFixed(2)}`, 25, yPosition);
  yPosition += 5;
  pdf.text(`  Source: ${calculations.tle.source}`, 25, yPosition);
  yPosition += 5;
  pdf.text(`  Last Verified: ${calculations.tle.lastVerified}`, 25, yPosition);
  yPosition += 10;

  // MALT details
  pdf.text("MALT (Mileage Allowance in Lieu of Transportation):", 20, yPosition);
  yPosition += 6;
  pdf.text(`  Amount: $${calculations.malt.amount.toFixed(2)}`, 25, yPosition);
  yPosition += 5;
  pdf.text(`  Source: ${calculations.malt.source}`, 25, yPosition);
  yPosition += 5;
  pdf.text(`  Last Verified: ${calculations.malt.lastVerified}`, 25, yPosition);
  yPosition += 10;

  // Per Diem details
  pdf.text("Per Diem:", 20, yPosition);
  yPosition += 6;
  pdf.text(`  Amount: $${calculations.per_diem.amount.toFixed(2)}`, 25, yPosition);
  yPosition += 5;
  pdf.text(`  Source: ${calculations.per_diem.source}`, 25, yPosition);
  yPosition += 5;
  pdf.text(`  Last Verified: ${calculations.per_diem.lastVerified}`, 25, yPosition);
  yPosition += 10;

  // PPM details
  pdf.text("PPM (Personally Procured Move):", 20, yPosition);
  yPosition += 6;
  pdf.text(`  Amount: $${calculations.ppm.amount.toFixed(2)}`, 25, yPosition);
  yPosition += 5;
  pdf.text(`  Source: ${calculations.ppm.source}`, 25, yPosition);
  yPosition += 5;
  pdf.text(`  Last Verified: ${calculations.ppm.lastVerified}`, 25, yPosition);
  yPosition += 15;

  return yPosition;
}

/**
 * Add validation results section
 */
async function addValidationResults(
  pdf: jsPDF,
  validationResults: ValidationResult[],
  yPosition: number
): Promise<number> {
  pdf.setFontSize(16);
  pdf.setFont("helvetica", "bold");
  pdf.text("JTR COMPLIANCE VALIDATION", 20, yPosition);

  yPosition += 15;

  if (validationResults.length === 0) {
    pdf.setFontSize(12);
    pdf.setFont("helvetica", "normal");
    pdf.text("✅ No validation issues found", 20, yPosition);
    yPosition += 10;
  } else {
    pdf.setFontSize(10);
    pdf.setFont("helvetica", "normal");

    const errors = validationResults.filter((r) => r.severity === "error");
    const warnings = validationResults.filter((r) => r.severity === "warning");
    const info = validationResults.filter((r) => r.severity === "info");

    if (errors.length > 0) {
      pdf.setFont("helvetica", "bold");
      pdf.text(`❌ ERRORS (${errors.length}):`, 20, yPosition);
      yPosition += 8;

      pdf.setFont("helvetica", "normal");
      errors.forEach((result, index) => {
        if (yPosition > 250) {
          pdf.addPage();
          yPosition = 20;
        }
        pdf.text(`${index + 1}. ${result.rule_title} (${result.rule_code})`, 25, yPosition);
        yPosition += 5;
        pdf.text(`   ${result.message}`, 25, yPosition);
        yPosition += 5;
        if (result.suggested_fix) {
          pdf.text(`   Fix: ${result.suggested_fix}`, 25, yPosition);
          yPosition += 5;
        }
        yPosition += 5;
      });
    }

    if (warnings.length > 0) {
      pdf.setFont("helvetica", "bold");
      pdf.text(`⚠️ WARNINGS (${warnings.length}):`, 20, yPosition);
      yPosition += 8;

      pdf.setFont("helvetica", "normal");
      warnings.forEach((result, index) => {
        if (yPosition > 250) {
          pdf.addPage();
          yPosition = 20;
        }
        pdf.text(`${index + 1}. ${result.rule_title} (${result.rule_code})`, 25, yPosition);
        yPosition += 5;
        pdf.text(`   ${result.message}`, 25, yPosition);
        yPosition += 5;
        if (result.suggested_fix) {
          pdf.text(`   Fix: ${result.suggested_fix}`, 25, yPosition);
          yPosition += 5;
        }
        yPosition += 5;
      });
    }

    if (info.length > 0) {
      pdf.setFont("helvetica", "bold");
      pdf.text(`ℹ️ INFORMATION (${info.length}):`, 20, yPosition);
      yPosition += 8;

      pdf.setFont("helvetica", "normal");
      info.forEach((result, index) => {
        if (yPosition > 250) {
          pdf.addPage();
          yPosition = 20;
        }
        pdf.text(`${index + 1}. ${result.rule_title} (${result.rule_code})`, 25, yPosition);
        yPosition += 5;
        pdf.text(`   ${result.message}`, 25, yPosition);
        yPosition += 5;
        if (result.suggested_fix) {
          pdf.text(`   Fix: ${result.suggested_fix}`, 25, yPosition);
          yPosition += 5;
        }
        yPosition += 5;
      });
    }
  }

  yPosition += 10;
  return yPosition;
}

/**
 * Add documents list section
 */
async function addDocumentsList(
  pdf: jsPDF,
  documents: PCSDocument[],
  yPosition: number
): Promise<number> {
  pdf.setFontSize(16);
  pdf.setFont("helvetica", "bold");
  pdf.text("SUPPORTING DOCUMENTS", 20, yPosition);

  yPosition += 15;

  if (documents.length === 0) {
    pdf.setFontSize(12);
    pdf.setFont("helvetica", "normal");
    pdf.text("No documents uploaded", 20, yPosition);
    yPosition += 10;
  } else {
    pdf.setFontSize(10);
    pdf.setFont("helvetica", "normal");

    documents.forEach((doc, index) => {
      if (yPosition > 250) {
        pdf.addPage();
        yPosition = 20;
      }

      pdf.text(`${index + 1}. ${doc.name}`, 20, yPosition);
      yPosition += 5;
      pdf.text(`   Type: ${doc.type}`, 25, yPosition);
      yPosition += 4;
      pdf.text(`   Size: ${(doc.size / 1024).toFixed(1)} KB`, 25, yPosition);
      yPosition += 4;
      pdf.text(`   Uploaded: ${new Date(doc.uploaded_at).toLocaleDateString()}`, 25, yPosition);
      yPosition += 4;

      if (doc.extracted_data?.amount) {
        pdf.text(`   Amount: $${doc.extracted_data.amount.toFixed(2)}`, 25, yPosition);
        yPosition += 4;
      }

      if (doc.extracted_data?.vendor) {
        pdf.text(`   Vendor: ${doc.extracted_data.vendor}`, 25, yPosition);
        yPosition += 4;
      }

      if (doc.extracted_data?.date) {
        pdf.text(`   Date: ${doc.extracted_data.date}`, 25, yPosition);
        yPosition += 4;
      }

      yPosition += 8;
    });
  }

  return yPosition;
}

/**
 * Add next steps section explaining DD-1351-2 process
 */
async function addNextStepsSection(pdf: jsPDF, yPosition: number): Promise<number> {
  // Check if we need a new page
  if (yPosition > 240) {
    pdf.addPage();
    yPosition = 20;
  }

  // Section header
  pdf.setFillColor(59, 130, 246); // blue-600
  pdf.rect(20, yPosition, 170, 10, "F");
  pdf.setFontSize(14);
  pdf.setFont("helvetica", "bold");
  pdf.setTextColor(255, 255, 255);
  pdf.text("NEXT STEPS: OFFICIAL REIMBURSEMENT PROCESS", 25, yPosition + 7);
  pdf.setTextColor(0, 0, 0);

  yPosition += 15;

  // Instructions
  pdf.setFontSize(10);
  pdf.setFont("helvetica", "normal");
  pdf.setTextColor(51, 65, 85); // slate-700

  const instructions = [
    "1. Log into the Defense Travel System (DTS) at https://dtsproweb.defensetravel.osd.mil",
    "",
    "2. Create a new PCS voucher by selecting 'Create New Authorization/Orders'",
    "",
    "3. Complete DD Form 1351-2 (Travel Voucher) with the following information:",
    "   • Use the calculated amounts from this worksheet as your reference",
    "   • Attach all receipts for lodging, meals, and other reimbursable expenses",
    "   • Include your PCS orders and any amendments",
    "",
    "4. Submit the voucher through DTS for approval by your finance office",
    "",
    "5. Track your voucher status in DTS - typical processing time is 5-15 business days",
    "",
    "IMPORTANT: The amounts in this worksheet are estimates based on JTR regulations.",
    "Your finance office will verify and approve the final reimbursement amounts.",
    "",
    "For questions about your specific entitlements, contact your local finance office or",
    "visit https://www.dfas.mil for official guidance.",
  ];

  instructions.forEach((line) => {
    if (yPosition > 270) {
      pdf.addPage();
      yPosition = 20;
    }

    if (line === "") {
      yPosition += 3; // Smaller gap for blank lines
    } else if (line.startsWith("IMPORTANT:")) {
      pdf.setFont("helvetica", "bold");
      pdf.text(line, 25, yPosition);
      pdf.setFont("helvetica", "normal");
      yPosition += 5;
    } else {
      pdf.text(line, 25, yPosition);
      yPosition += 5;
    }
  });

  return yPosition + 10;
}

/**
 * Add professional footer with provenance and branding
 */
function addFooter(pdf: jsPDF): void {
  const pageCount = (pdf as any).internal.getNumberOfPages();

  for (let i = 1; i <= pageCount; i++) {
    pdf.setPage(i);

    // Footer background
    pdf.setFillColor(248, 250, 252); // slate-50
    pdf.rect(0, 280, 210, 17, "F");

    // Footer content
    pdf.setFontSize(8);
    pdf.setFont("helvetica", "normal");
    pdf.setTextColor(71, 85, 105); // slate-600

    // Left: Generation info
    pdf.text(`Generated: ${new Date().toLocaleString()}`, 20, 287);
    pdf.text("Based on 2025 DFAS rates, verified Oct 26, 2025", 20, 292);

    // Center: Page number
    pdf.setFont("helvetica", "bold");
    pdf.text(`Page ${i} of ${pageCount}`, 105, 289.5, { align: "center" });

    // Right: Branding
    pdf.setFont("helvetica", "bold");
    pdf.text("Garrison Ledger", 190, 287, { align: "right" });
    pdf.setFont("helvetica", "normal");
    pdf.text("PCS Copilot", 190, 292, { align: "right" });

    // Reset text color
    pdf.setTextColor(0, 0, 0);
  }
}

/**
 * Generate a simple claim summary PDF (for quick reference)
 */
export async function generateClaimSummaryPDF(
  claimData: PCSClaimData,
  calculations: PCSCalculations
): Promise<Buffer> {
  try {
    const pdf = new jsPDF("p", "mm", "a4");

    // Add header
    pdf.setFontSize(20);
    pdf.setFont("helvetica", "bold");
    pdf.text("PCS CLAIM SUMMARY", 20, 20);

    // Add claim details
    pdf.setFontSize(12);
    pdf.setFont("helvetica", "normal");
    pdf.text(`Member: ${claimData.member_name} (${claimData.rank})`, 20, 35);
    pdf.text(`Move: ${claimData.origin_base} → ${claimData.destination_base}`, 20, 42);
    pdf.text(`Departure: ${claimData.departure_date}`, 20, 49);

    // Add calculations
    pdf.setFontSize(16);
    pdf.setFont("helvetica", "bold");
    pdf.text("ENTITLEMENTS", 20, 70);

    pdf.setFontSize(14);
    pdf.setFont("helvetica", "bold");
    pdf.text(`Total: $${calculations.total_entitlements.toFixed(2)}`, 20, 85);

    pdf.setFontSize(12);
    pdf.setFont("helvetica", "normal");
    pdf.text(`DLA: $${calculations.dla.amount.toFixed(2)}`, 20, 100);
    pdf.text(`TLE: $${calculations.tle.amount.toFixed(2)}`, 20, 110);
    pdf.text(`MALT: $${calculations.malt.amount.toFixed(2)}`, 20, 120);
    pdf.text(`Per Diem: $${calculations.per_diem.amount.toFixed(2)}`, 20, 130);
    pdf.text(`PPM: $${calculations.ppm.amount.toFixed(2)}`, 20, 140);

    // Add footer
    pdf.setFontSize(8);
    pdf.text(`Generated: ${new Date().toLocaleString()}`, 20, 280);
    pdf.text("Garrison Ledger PCS Copilot", 150, 280);

    const pdfBuffer = Buffer.from(pdf.output("arraybuffer"));

    logger.info("PCS claim summary PDF generated", {
      claimId: claimData.id,
      size: pdfBuffer.length,
    });

    return pdfBuffer;
  } catch (error) {
    logger.error("Failed to generate claim summary PDF:", error);
    throw new Error("Summary PDF generation failed");
  }
}
