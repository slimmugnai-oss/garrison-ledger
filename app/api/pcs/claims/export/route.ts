import { currentUser } from "@clerk/nextjs/server";
import { jsPDF } from "jspdf";
import { NextRequest, NextResponse } from "next/server";

import { supabaseAdmin } from "@/lib/supabase/admin";


export async function POST(request: NextRequest) {
  try {
    const user = await currentUser();

    if (!user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const { claimIds } = await request.json();

    if (!claimIds || claimIds.length === 0) {
      return NextResponse.json({ error: "No claims selected" }, { status: 400 });
    }

    // Fetch selected claims
    const { data: claims, error } = await supabaseAdmin
      .from("pcs_claims")
      .select(
        `
        id,
        claim_name,
        origin_base,
        destination_base,
        departure_date,
        arrival_date,
        status,
        submitted_date,
        approved_date,
        paid_date,
        total_entitlements,
        total_reimbursed,
        net_savings,
        created_at,
        entitlements
      `
      )
      .eq("user_id", user.id)
      .in("id", claimIds)
      .order("created_at", { ascending: false });

    if (error) {
      console.error("Error fetching claims for export:", error);
      return NextResponse.json({ error: "Failed to fetch claims" }, { status: 500 });
    }

    if (!claims || claims.length === 0) {
      return NextResponse.json({ error: "No claims found" }, { status: 404 });
    }

    // Generate PDF
    const pdf = new jsPDF();
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    let yPosition = 20;

    // Header
    pdf.setFontSize(20);
    pdf.setFont("helvetica", "bold");
    pdf.text("PCS Claims Report", pageWidth / 2, yPosition, { align: "center" });
    yPosition += 10;

    pdf.setFontSize(12);
    pdf.setFont("helvetica", "normal");
    pdf.text(`Generated: ${new Date().toLocaleDateString()}`, pageWidth / 2, yPosition, {
      align: "center",
    });
    yPosition += 20;

    // Summary stats
    const totalEntitlements = claims.reduce(
      (sum, claim) => sum + (claim.total_entitlements || 0),
      0
    );
    const totalReimbursed = claims.reduce((sum, claim) => sum + (claim.total_reimbursed || 0), 0);
    const totalSavings = claims.reduce((sum, claim) => sum + (claim.net_savings || 0), 0);

    pdf.setFontSize(14);
    pdf.setFont("helvetica", "bold");
    pdf.text("Summary", 20, yPosition);
    yPosition += 10;

    pdf.setFontSize(10);
    pdf.setFont("helvetica", "normal");
    pdf.text(`Total Claims: ${claims.length}`, 20, yPosition);
    yPosition += 6;
    pdf.text(`Total Entitlements: $${totalEntitlements.toLocaleString()}`, 20, yPosition);
    yPosition += 6;
    pdf.text(`Total Reimbursed: $${totalReimbursed.toLocaleString()}`, 20, yPosition);
    yPosition += 6;
    pdf.text(`Total Savings: $${totalSavings.toLocaleString()}`, 20, yPosition);
    yPosition += 20;

    // Individual claims
    claims.forEach((claim, index) => {
      // Check if we need a new page
      if (yPosition > pageHeight - 40) {
        pdf.addPage();
        yPosition = 20;
      }

      pdf.setFontSize(12);
      pdf.setFont("helvetica", "bold");
      pdf.text(`${index + 1}. ${claim.claim_name}`, 20, yPosition);
      yPosition += 8;

      pdf.setFontSize(10);
      pdf.setFont("helvetica", "normal");

      // Route
      pdf.text(`Route: ${claim.origin_base} â†’ ${claim.destination_base}`, 20, yPosition);
      yPosition += 6;

      // Dates
      pdf.text(
        `Departure: ${claim.departure_date ? new Date(claim.departure_date).toLocaleDateString() : "N/A"}`,
        20,
        yPosition
      );
      yPosition += 6;
      pdf.text(
        `Arrival: ${claim.arrival_date ? new Date(claim.arrival_date).toLocaleDateString() : "N/A"}`,
        20,
        yPosition
      );
      yPosition += 6;

      // Status
      pdf.text(
        `Status: ${claim.status.charAt(0).toUpperCase() + claim.status.slice(1)}`,
        20,
        yPosition
      );
      yPosition += 6;

      // Financial info
      pdf.text(`Entitlements: $${(claim.total_entitlements || 0).toLocaleString()}`, 20, yPosition);
      yPosition += 6;
      pdf.text(`Reimbursed: $${(claim.total_reimbursed || 0).toLocaleString()}`, 20, yPosition);
      yPosition += 6;
      pdf.text(`Savings: $${(claim.net_savings || 0).toLocaleString()}`, 20, yPosition);
      yPosition += 15;

      // Add separator line
      if (index < claims.length - 1) {
        pdf.setDrawColor(200, 200, 200);
        pdf.line(20, yPosition, pageWidth - 20, yPosition);
        yPosition += 10;
      }
    });

    // Footer
    const finalY = pageHeight - 20;
    pdf.setFontSize(8);
    pdf.setFont("helvetica", "normal");
    pdf.text("Generated by Garrison Ledger - PCS Copilot", pageWidth / 2, finalY, {
      align: "center",
    });

    // Convert to buffer
    const pdfBuffer = Buffer.from(pdf.output("arraybuffer"));

    return new NextResponse(new Uint8Array(pdfBuffer), {
      headers: {
        "Content-Type": "application/pdf",
        "Content-Disposition": `attachment; filename="pcs-claims-${new Date().toISOString().split("T")[0]}.pdf"`,
      },
    });
  } catch (error) {
    console.error("PDF export error:", error);
    return NextResponse.json({ error: "Failed to generate PDF" }, { status: 500 });
  }
}
